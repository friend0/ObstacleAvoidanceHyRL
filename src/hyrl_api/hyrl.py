# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: hyrl_api/obstacle_avoidance.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib


class ModelType(betterproto.Enum):
    STANDARD = 0
    HYBRID = 1


class HeadingDirection(betterproto.Enum):
    RESERVED = 0
    STRAIGHT = 1
    LEFT = 2
    HARD_LEFT = 3
    RIGHT = 4
    HARD_RIGHT = 5


@dataclass
class DroneState(betterproto.Message):
    """define drone state"""

    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)
    z: float = betterproto.float_field(3)


@dataclass
class TrajectoryRequest(betterproto.Message):
    state: "DroneState" = betterproto.message_field(1)
    target_state: "DroneState" = betterproto.message_field(2)
    duration_s: int = betterproto.uint32_field(3)
    sampling_time: float = betterproto.float_field(4)
    model_type: "ModelType" = betterproto.enum_field(5)
    num_waypoints: int = betterproto.int32_field(6)
    noise: bool = betterproto.bool_field(7)


@dataclass
class TrajectoryResponse(betterproto.Message):
    trajectory: List["DroneState"] = betterproto.message_field(1)


@dataclass
class DirectionRequest(betterproto.Message):
    """DEFINE DIRECTION REQUEST"""

    state: "DroneState" = betterproto.message_field(1)
    model_type: "ModelType" = betterproto.enum_field(2)


@dataclass
class DirectionResponse(betterproto.Message):
    """DEFINE DIRECTION RESPONSE"""

    discrete_heading: "DiscreteHeading" = betterproto.message_field(
        2, group="control_type"
    )
    continuous_heading: "ContinuousHeading" = betterproto.message_field(
        3, group="control_type"
    )


@dataclass
class DiscreteHeading(betterproto.Message):
    direction: "HeadingDirection" = betterproto.enum_field(1)


@dataclass
class ContinuousHeading(betterproto.Message):
    rad: float = betterproto.float_field(1)


class ObstacleAvoidanceServiceStub(betterproto.ServiceStub):
    async def get_direction(
        self, *, state: Optional["DroneState"] = None, model_type: "ModelType" = 0
    ) -> DirectionResponse:
        request = DirectionRequest()
        if state is not None:
            request.state = state
        request.model_type = model_type

        return await self._unary_unary(
            "/hyrl.ObstacleAvoidanceService/GetDirection",
            request,
            DirectionResponse,
        )

    async def get_trajectory(
        self,
        *,
        state: Optional["DroneState"] = None,
        target_state: Optional["DroneState"] = None,
        duration_s: int = 0,
        sampling_time: float = 0,
        model_type: "ModelType" = 0,
        num_waypoints: int = 0,
        noise: bool = False,
    ) -> TrajectoryResponse:
        request = TrajectoryRequest()
        if state is not None:
            request.state = state
        if target_state is not None:
            request.target_state = target_state
        request.duration_s = duration_s
        request.sampling_time = sampling_time
        request.model_type = model_type
        request.num_waypoints = num_waypoints
        request.noise = noise

        return await self._unary_unary(
            "/hyrl.ObstacleAvoidanceService/GetTrajectory",
            request,
            TrajectoryResponse,
        )
