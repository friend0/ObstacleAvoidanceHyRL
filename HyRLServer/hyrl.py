# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: hyrl.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib


class HeadingDirection(betterproto.Enum):
    STRAIGHT = 0
    LEFT = 1
    HARD_LEFT = 2
    RIGHT = 3
    HARD_RIGHT = 4


@dataclass
class DirectionRequest(betterproto.Message):
    drone_state: "DroneState" = betterproto.message_field(1)


@dataclass
class DroneState(betterproto.Message):
    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)
    z: float = betterproto.float_field(3)


@dataclass
class DirectionResponse(betterproto.Message):
    discrete_heading: "DiscreteHeading" = betterproto.message_field(
        2, group="control_type"
    )
    continuous_heading: "ContinuousHeading" = betterproto.message_field(
        3, group="control_type"
    )


@dataclass
class DiscreteHeading(betterproto.Message):
    direction: "HeadingDirection" = betterproto.enum_field(1)


@dataclass
class ContinuousHeading(betterproto.Message):
    rad: float = betterproto.float_field(1)


@dataclass
class SetEnvironmentRequest(betterproto.Message):
    """DEFINE ENVIRONMENT REQUEST"""

    obstacles: List["Polygon2D"] = betterproto.message_field(1)


@dataclass
class Polygon2D(betterproto.Message):
    points: List["Point2D"] = betterproto.message_field(1)


@dataclass
class Point2D(betterproto.Message):
    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)


@dataclass
class SetEnvironmentResponse(betterproto.Message):
    """DEFINE ENVIRONMENT RESPONSE"""

    message: str = betterproto.string_field(1)


class ObstacleAvoidanceServiceStub(betterproto.ServiceStub):
    async def set_environment(
        self, *, obstacles: List["Polygon2D"] = []
    ) -> SetEnvironmentResponse:
        request = SetEnvironmentRequest()
        if obstacles is not None:
            request.obstacles = obstacles

        return await self._unary_unary(
            "/hyrl.ObstacleAvoidanceService/SetEnvironment",
            request,
            SetEnvironmentResponse,
        )

    async def get_direction(
        self, *, drone_state: Optional["DroneState"] = None
    ) -> DirectionResponse:
        request = DirectionRequest()
        if drone_state is not None:
            request.drone_state = drone_state

        return await self._unary_unary(
            "/hyrl.ObstacleAvoidanceService/GetDirection",
            request,
            DirectionResponse,
        )
